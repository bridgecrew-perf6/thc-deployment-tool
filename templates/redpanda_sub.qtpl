{% func RedpandaSubscribe(appName string, redpandaTopic string) %}
const { Kafka } = require('kafkajs')
const { v4 } = require('uuid')
const { SchemaRegistry } = require('@kafkajs/confluent-schema-registry')
require("dotenv").config()

const kafka = new Kafka({
  clientId: '{%s appName %}',
  brokers: [process.env.BROKER_URL1, process.env.BROKER_URL2, process.env.BROKER_URL3],

})

const registry = new SchemaRegistry({ host: process.env.SCHEMA_URL1 })

async function sub() {

  const consumer = kafka.consumer({ groupId: v4() })

  await consumer.connect()

  await consumer.subscribe({ topic: '{%s redpandaTopic %}', fromBeginning: true })

  let msgCount = 0

  await consumer.run({
    eachMessage: async ({ topic, partition, message }) => {
      const decodedValue = await registry.decode(message.value)
      const payload =
      {
        topic: topic,
        payload: decodedValue,
        partition: partition,
        offset: message.offset,
        timestamp: message.timestamp,
      }

      console.log(payload)

    },
  })

}

sub()

{% endfunc %}
