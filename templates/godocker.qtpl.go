// Code generated by qtc from "godocker.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line godocker.qtpl:1
package templates

//line godocker.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line godocker.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line godocker.qtpl:1
func StreamGodocker(qw422016 *qt422016.Writer, portSelected string, mainScriptDir string) {
//line godocker.qtpl:1
	qw422016.N().S(`

# Build Stage
FROM golang:latest as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy everything from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./`)
//line godocker.qtpl:13
	qw422016.E().S(mainScriptDir)
//line godocker.qtpl:13
	qw422016.N().S(`


# Production Stage
FROM alpine:latest

RUN apk --no-cache add ca-certificates

WORKDIR /root/  

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/main .
COPY .env .

EXPOSE `)
//line godocker.qtpl:27
	qw422016.E().S(portSelected)
//line godocker.qtpl:27
	qw422016.N().S(`

# Command to run the executable
CMD ["./main"]

`)
//line godocker.qtpl:32
}

//line godocker.qtpl:32
func WriteGodocker(qq422016 qtio422016.Writer, portSelected string, mainScriptDir string) {
//line godocker.qtpl:32
	qw422016 := qt422016.AcquireWriter(qq422016)
//line godocker.qtpl:32
	StreamGodocker(qw422016, portSelected, mainScriptDir)
//line godocker.qtpl:32
	qt422016.ReleaseWriter(qw422016)
//line godocker.qtpl:32
}

//line godocker.qtpl:32
func Godocker(portSelected string, mainScriptDir string) string {
//line godocker.qtpl:32
	qb422016 := qt422016.AcquireByteBuffer()
//line godocker.qtpl:32
	WriteGodocker(qb422016, portSelected, mainScriptDir)
//line godocker.qtpl:32
	qs422016 := string(qb422016.B)
//line godocker.qtpl:32
	qt422016.ReleaseByteBuffer(qb422016)
//line godocker.qtpl:32
	return qs422016
//line godocker.qtpl:32
}
